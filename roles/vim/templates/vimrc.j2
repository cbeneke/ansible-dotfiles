" {{ ansible_managed }}

execute pathogen#infect()

syntax on
filetype plugin indent on

" ----------------------------------------------------------------------------
" UI (-ish)
" ----------------------------------------------------------------------------
set showcmd                 " Show (partial) command in status line.
set showmatch               " Show matching brackets.
set ignorecase              " Do case insensitive matching
set smartcase               " Do smart case matching
set incsearch               " Incremental search
set autowrite               " Automatically save before commands like :next and :make
set bs=2                    " Allow backspacing over everything in insert mode
set ai                      " Always set auto-indenting on
set history=50              " Keep 50 lines of command history
set ruler                   " Show the cursor position all the time
set laststatus=2            " Show statusline (with filename)
set clipboard+=unnamedplus  " Enable clipboard
set mouse=r                 " Enable middle-click for mouse but disable navigation
{% if item.type is defined and item.type == 'interactive' %}
set number                  " Show linenumbers on curser position
set numberwidth=4           " Use 4 Character width for numbers
set relativenumber          " Show relative linenumbers
set colorcolumn=80          " Highlight 80th linenumber
set showtabline=1           " Show the tabline when multiple tabs are open
{% endif %}

{% if item.type is defined and item.type == 'interactive' %}
" Highlight trailing whitespace and tabs
set list listchars=tab:>.,trail:.,extends:#,nbsp:.

{% endif %}
" Use <C-l> to clear the highlighting of :set hlsearch.
if maparg('<C-l>', 'n') ==# ''
  nnoremap <silent> <C-l> :nohlsearch<CR><C-l>
endif

" ----------------------------------------------------------------------------
" Formatting
" ----------------------------------------------------------------------------
set nocompatible  " Use Vim defaults (over Vi defaults)
set fo=tcq        " turn off auto adding comments on next line
{% if item.type is defined and item.type == 'interactive' %}
set modeline      " enable modeline
set modelines=5
{% endif %}

" Ensure UTF-8 Encoding
set encoding=utf-8
set fileencoding=utf-8

" Handle indentation
set tabstop={{ vim_indentation }}
set softtabstop={{ vim_indentation }}
set shiftwidth={{ vim_indentation }}
{% if item.type is defined and item.type == 'interactive' %}
set textwidth=80
set autoindent
set smartindent
set expandtab
{% endif %}

{% if item.type is defined and item.type == 'interactive' %}
"toggle paste and go in insert mode
if maparg('<C-i>', 'n') ==# ''
  nnoremap <silent> <C-i> :set paste<CR>:startinsert<CR>
endif

" Disable paste mode when leaving Insert mode
au InsertLeave * set nopaste

{% endif %}
" ----------------------------------------------------------------------------
" Colors
" ----------------------------------------------------------------------------
set t_Co=256

colorscheme vividchalk
set bg=dark
highlight LiteralTabs ctermbg=darkgreen guibg=darkgreen
match LiteralTabs /\s\  /
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$/

" ---------------------------------------------------------------------------
" File Types
" ---------------------------------------------------------------------------
au BufRead,BufNewFile *.go         set ft=go
au BufRead,BufNewFile *.god        set ft=ruby
au BufRead,BufNewFile *.haml       set ft=haml
au BufRead,BufNewFile *.json       set ft=json syntax=javascript
au BufRead,BufNewFile *.markdown   set ft=markdown
au BufRead,BufNewFile *.md         set ft=markdown
au BufRead,BufNewFile *.mustache   set ft=mustache
au BufRead,BufNewFile *.rl         set ft=ragel
au BufRead,BufNewFile *.ronn       set ft=markdown
au BufRead,BufNewFile *.rpdf       set ft=ruby
au BufRead,BufNewFile *.rtxt       set ft=html
au BufRead,BufNewFile *.ru         set ft=ruby
au BufRead,BufNewFile *.rxls       set ft=ruby
au BufRead,BufNewFile *.sql        set ft=pgsql
au BufRead,BufNewFile *.svg        set ft=svg
au BufRead,BufNewFile *.tex        set ft=tex

au Filetype gitcommit setlocal tw=68 spell
au FileType go        setlocal ts=4 sw=4 sts=0 noexpandtab
au FileType html      setlocal spell
au Filetype json      setlocal syntax=javascript
au Filetype markdown  setlocal tw=80 ts=2 sw=2 spell
au Filetype ruby      setlocal tw=80 ts=2 sw=2 sts=0
au FileType tex       setlocal sw=2 ts=2 iskeyword+=: spell
au FileType make      setlocal modelines=0 noexpandtab

{% if item.type is defined and item.type == 'interactive' %}
" ----------------------------------------------------------------------------
" Syntastic / Linter
" ----------------------------------------------------------------------------
let g:syntastic_check_on_wq = 0
let g:syntastic_puppet_puppetlint_args = '--no-80chars-check --no-140chars-check'
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': ['ruby', 'python', 'puppet']}
let g:syntastic_puppet_puppetlint_args = '--no-80chars-check --no-140chars-check'

" Aggregrate puppet + puppetlint errors
let g:syntastic_aggregate_errors = 1
let g:syntastic_check_on_wq = 0

" yamllint
autocmd Filetype yaml let g:syntastic_check_on_open = 1
let g:syntastic_yaml_checkers = ['yamllint']
let g:syntastic_yaml_yamllint_args = '-d "{extends: relaxed, rules:{ line-length: disable, empty-lines: disable, document-start: disable, trailing-spaces: enable, comments-indentation: disable, comments: disable, hyphens: {max-spaces-after: 1}, colons: {max-spaces-before: 0, max-spaces-after: 1}, truthy: disable, brackets: disable, indentation: {spaces: 2, indent-sequences: consistent} } }"'

{% endif %}
" ----------------------------------------------------------------------------
" Other
" ----------------------------------------------------------------------------

{% if item.type is defined and item.type == 'pager' %}
let $PAGER='' " Manpage support

{% endif %}
{% if item.type is defined and item.type == 'interactive' %}
" Save undo history to files for persistent even if vim was closed inbetween
set undodir=~/.config/nvim/nvimundo
set undofile
set undolevels=1000 " Maximum number of changes that can be undone
set undoreload=1000 " Maximum number lines to save for undo on a buffer reload

" Jump to the last position when reopening a file
if has("autocmd")
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Set up puppet manifest and spec options
autocmd BufRead,BufNewFile *.pp set filetype=puppet

" Remove trailing whitespaces on save
autocmd BufWritePre * if &ft!~?'markdown' | %s/\s\+$//e

" au BufRead,BufNewFile *_spec.rb
  \ nmap <F8> :!rspec --color %<CR>

{% endif %}
" vim:set ft=vim et sw=2 sts=2
